{"version":3,"sources":["axios.js","Row.js","requests.js","img/avatar_img.png","img/Logo_netfilm.png","Nav.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","get","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","request","console","log","data","results","fetchData","table","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","err","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","process","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","Logo","img","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d0ee53d.chunk.js","sourcesContent":["import axios from 'axios';\n\n/** base url to make requests to the movie database */\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\ninstance.get('/foo-bar');\n//  It shows https://api.themoviedb.org/3/foo-bar\n\n\nexport default instance;","// rfce\nimport React,{useState, useEffect} from 'react'\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\n\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  // A snippet of code which runs based on a specific condition/variable\n  useEffect(() => {\n    // if put [], run once when the row loads, and don't run again\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      console.log(request);\n      setMovies(request.data.results);\n      return request;\n      //It will get \"https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\",\n    }\n    fetchData();\n  }, [fetchUrl])\n  console.table(movies);\n  \n  const opts = {\n     height: \"390\",\n     width: \"100%\",\n     playerVars: {\n       // https://developers.google.com/youtube/player_parameters\n       autoplay:1,\n     },\n  };\n   \n  const handleClick = (movie) => {\n    if(trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer(movie?.name || \"\")\n       .then((url)=> {\n         // https://www.youtube.com/watch?v=XtMThy8QKqU -> we need \"?v=XtMThy8QKqU\"\n         const urlParams = new URLSearchParams(new URL(url).search);\n         setTrailerUrl(urlParams.get(\"v\"));\n       })\n       .catch((err) => console.log(err));\n    }\n  }\n\n\n\n  return (\n    <div className=\"row\">\n       {/* title */}\n       <h2>{title}</h2>\n        \n      {/* container -> posters */}\n       <div className=\"row__posters\">\n         {/** row__poster */}\n\n         {movies.map(movie => (\n           // poster_path -> is snipped of URL \"/2VsVifJ5OCJ9L2419ZPPoGbD4up.jpg\"\n           <img\n           key={movie.id}\n           onClick={() => handleClick(movie)}\n           className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n           src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n           alt={movie.name}\n           />\n         ))}\n       </div>\n       {/*<YouTube videoId={trailerUrl} opts={opts}/>*/}\n       {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/> }\n    </div>\n  )\n}\n\nexport default Row\n","const API_KEY = `${process.env.REACT_APP_MOVIE_API_KEY}`;\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n}\n\nexport default requests;","export default __webpack_public_path__ + \"static/media/avatar_img.feee7f65.png\";","export default __webpack_public_path__ + \"static/media/Logo_netfilm.17d22b2f.png\";","import React,{ useState, useEffect } from 'react';\nimport img from './img/avatar_img.png';\nimport Logo from './img/Logo_netfilm.png';\nimport './Nav.css'\n\n\nfunction Nav() {\n   const [show, handleShow] = useState(false); \n\n   useEffect(() => {\n     window.addEventListener(\"scroll\", ()=> {\n       if (window.scrollY > 100) {\n         handleShow(true);\n       } else handleShow(false);\n     });\n     return () => {\n       window.removeEventListener(\"scroll\");\n     };\n   }, []);\n\n\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <img \n      className=\"nav__logo\"\n      src={Logo}\n      alt=\"Netflim Logo\"\n      />\n\n      <img \n      className=\"nav__avatar\"\n      src={img} \n      alt=\"Netfilm Avatar\"\n      />\n    </div>\n  )\n}\n\nexport default Nav\n","/* eslint-disable jsx-a11y/heading-has-content */\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport requests from './requests';\nimport './Banner.css';\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n\n      // console.log(request.data.results)// console shows data of array[];\n\n      setMovie(\n        request.data.results[\n        Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n        // >> Math.floor(Math.random() * request.data.results.length -1)\n        // we just wanna take one movie over as random \n      );\n      return request\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n          \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        {/* title */}\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div className=\"banner__buttons\">\n           <button className=\"banner__button\">Play</button>\n           <button className=\"banner__button\">My List</button>\n        </div>\n\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n        {/* div > 2 buttons */}\n        {/* description */}\n      </div>\n\n      <div className=\"banner--fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner\n","import React from 'react'\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Nav from './Nav';\nimport Banner from './Banner';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* Nav */}\n      <Nav />\n      {/* Banner */}\n      <Banner />\n      <Row \n      title=\"NETFILM's Collections\" \n      fetchUrl={requests.fetchNetflixOriginals} \n      isLargeRow={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}